var Y=Object.defineProperty;var j=(S,e,s)=>e in S?Y(S,e,{enumerable:!0,configurable:!0,writable:!0,value:s}):S[e]=s;var M=(S,e,s)=>j(S,typeof e!="symbol"?e+"":e,s);import{D as m,n as y,j as F,i as G,F as w}from"./main-CRiP0NLe.js";const z={};function E(S){const{starters:e,main:s,doubleOrderChance:t,desserts:a,sides:l,groupSizes:o}=S,g=[e,s,t,a,[...o].sort((c,d)=>c-d)].join("|");if(z[g])return z[g];let r=[0,0,0],u=[0,0,0,0],i=1-.75**l;if(e>0){r[0]=1;let c=1-.75**e;t===.5&&(c*=1.25,i*=1.25),u[0]=o.reduce((d,n)=>d+1+(n-1)*c,0)}const C=o.reduce((c,d)=>c+d);s&&(r[1]=1,u[1]=C),a>0&&(u[2]=C,s?(r[2]=1-.75**a,t===.5&&(r[2]*=1.25)):r[2]=1);let f=1;e>0&&(r[0]*=1+t,f*=1-t,u[0]*=r[0]),s&&(r[1]*=1+f*t,f*=1-t,u[1]*=r[1],u[3]=u[1]*i),a>0&&(r[2]*=1+f*t,f*=1-t,u[2]*=r[2]);const b=[r.map(c=>c*o.length),u];return z[g]=b,b}function W(S){const{starters:e,main:s,doubleOrderChance:t,desserts:a,sides:l,groupSizes:o}=S;let g=[0,0,0],r=[0,0,0,0],u=1-.75**e,i=1-.75**a,C=1-.75**l;t===.5&&(u*=1.25,i*=1.25,C*=1.25);const f=n=>{g[0]++,r[0]++;for(let D=0;D<n-1;D++)Math.random()<u&&r[0]++},b=n=>{g[1]++,r[1]+=n;for(let D=0;D<n;D++)Math.random()<C&&r[3]++},c=n=>{g[2]++,r[2]+=n};for(const n of o){let D=!1;e>0&&(f(n),!D&&Math.random()<t&&(D=!0,f(n))),b(n),!D&&Math.random()<t&&(D=!0,b(n)),a>0&&Math.random()<i&&(c(n),!D&&Math.random()<t&&(D=!0,c(n)))}return[g,r]}const K={"Diner (1)":1,"Small (2)":2,"Medium (2)":2,"Large (3)":3,"Huge (4)":4},I={};["Morning Rush","Lunch Rush","Dinner Rush"].forEach(S=>I[S]=!0);class J{constructor(e,s=[],t=[]){M(this,"seed");M(this,"mapSize");M(this,"frontDoor");M(this,"startingCards");M(this,"cards");M(this,"playerCount");M(this,"turbo");M(this,"_actionInfoCacheByCards",{});M(this,"_cardsByDay",[]);this.seed=e,this.mapSize=this.getMapSize(),this.frontDoor=this.getDoorInfo(),this.startingCards=s,this.cards=t,this.playerCount=K[this.mapSize],this.turbo=this.startingCards.some(a=>{if(a===void 0){console.log({startingCards:s});debugger}return a.Name==="Turbo"})}guessMoney(e){if(e===0)return this.turbo?30:0;const s=this.getCardsByDay(e),t=this.getGroupSizes(e);let a=!1,l=!1,o=0,g=[],r=[],u=0,i=[],C=0,f=[];for(const p of s)switch(p.Name==="All You Can Eat"&&(a=!0),p.Name==="Double Helpings"&&(l=!0),p.DishType){case m.Dessert:u++,p.DishValue&&i.push(p.DishValue);break;case m.Starter:p.DishValue&&g.push(p.DishValue),o++;break;case m.Side:p.DishValue&&f.push(p.DishValue),C++;break;case m.Main:case m.Base:p.Name==="Tacos"?(r.push(2),r.push(3)):p.DishValue&&r.push(p.DishValue)}let b=l?.5:a?.25:0,c=[0,0,0,0];if(c[0]=y(g),c[1]=y(r),c[2]=y(i),c[3]=y(f),l)for(let p=0;p<3;p++)c[p]&&(c[p]+=3);const[d,n]=E({starters:o,main:!!c[1],doubleOrderChance:b,desserts:u,sides:C,groupSizes:t});let D=0;for(let p=0;p<n.length;p++)D+=n[p]*c[p];const B=T(this.playerCount),V=this.getBookingDeskCount(e),N=this.getBookingDeskMoney(e);return B*(D+V*N)}courseInfo(e){if(e===0)return[[0,0,0],[0,0,0,0]];const s=this.getCardsByDay(e),t=this.getGroupSizes(e);let a=!1,l=!1,o=0,g=[],r=[],u=0,i=[],C=0,f=[];for(const n of s)switch(n.Name==="All You Can Eat"&&(a=!0),n.Name==="Double Helpings"&&(l=!0),n.DishType){case m.Dessert:u++,n.DishValue&&i.push(n.DishValue);break;case m.Starter:n.DishValue&&g.push(n.DishValue),o++;break;case m.Side:n.DishValue&&f.push(n.DishValue),C++;break;case m.Main:case m.Base:n.Name==="Tacos"?(r.push(2),r.push(3)):n.DishValue&&r.push(n.DishValue)}let b=l?.5:a?.25:0,c=[0,0,0,0];if(c[0]=y(g),c[1]=y(r),c[2]=y(i),c[3]=y(f),l)for(let n=0;n<3;n++)c[n]&&(c[n]+=3);return E({starters:o,main:!!c[1],doubleOrderChance:b,desserts:u,sides:C,groupSizes:t})}actionInfo(e){if(e===0)return 0;const s=this.getCardsByDay(e),t=e.toString()+":"+s.map(h=>h.Name).sort().join(","),a=this._actionInfoCacheByCards[t];if(a)return a;let l=0;const o={Breakfast:6,Dumplings:11.25,"Stir Fry":26/2,Steak:7};let g=0;for(let h=0;h<s.length;h++)if(s[h].DishType!==m.Null){const k=s[h].Name;g=o[k]??20;break}let r=-1,u=[1,1,1],i=[[],[g],[],[]],C=0;const f=this.getGroupSizes(e);let b=!1,c=!1,d=0,n=[],D=[],B=0,V=[],N=0,p=[],P=!1,R=!1;for(const h of s){switch(h.Name==="All You Can Eat"&&(b=!0),h.Name==="Double Helpings"&&(c=!0),h.Name){case"Picky Eaters":P=!0;break;case"Leisurely Eating":R=!0,C+=2;break;case"Instant Service":for(let k=0;k<3;k++)u[k]--;break;case"Ice Cream":i[2].push(5.125);break;case"Cheese Board":i[2].push(10);break;case"Cherry Pie":i[2].push(11);break;case"Apple Pies":i[2].push(15);break;case"Pumpkin Pies":i[2].push(16);break;case"Carrot Soup":case"Meat Soup":i[0].push(7);break;case"Tomato Soup":case"Pumpkin Soup":u[0]=4,i[0].push(8);break;case"Broccoli Cheese Soup":i[0].push(5),u[0]=4;break;case"Pumpkin Seed":i[0].push(3*8);break;case"Bread":i[0].push(5*3);break;case"Mandarin Starter":i[0].push(7*3);break;case"Mashed Potato":case"Broccoli":case"Bamboo":i[3].push(2);break;case"Onion Rings":i[3].push(8);break;case"Corn on the Cob":i[3].push(6);break;case"Chips":i[3].push(7);break;case"Roast Potato":i[3].push(4);break}switch(h.DishType){case m.Dessert:B++,h.DishValue&&V.push(h.DishValue);break;case m.Starter:h.DishValue&&n.push(h.DishValue),d++;break;case m.Side:h.DishValue&&p.push(h.DishValue),N++;break;case m.Main:case m.Base:h.Name==="Tacos"?(D.push(2),D.push(3)):h.DishValue&&D.push(h.DishValue);break;case m.Extra:h.Name==="Seaweed"?(i[1][0]+=1.75,r+=2):h.Name==="Dumpling - Soy Sauce"?i[1][0]+=.4:h.Name==="Breakfast Beans"?i[1][0]+=1+3/4:h.Name==="Breakfast Eggs"?i[1][0]+=6:h.Name==="Breakfast Extras"&&(r++,i[1][0]+=1.5*2),r++;break}}e>6&&(i[3]=[]),P&&(R&&!b||(i[1][0]+=2,r++));let H=c?.5:b?.25:0;l+=f.length*C;const[v,A]=E({starters:d,main:!0,doubleOrderChance:H,desserts:B,sides:N,groupSizes:f});v.forEach((h,k)=>l+=h*u[k]);for(const h of i)for(let k=0;k<h.length;k++)r>0&&(h[k]+=r),r+=1;return A.forEach((h,k)=>{var x;if((x=i[k])!=null&&x.length){if(!k){const _=Math.ceil(h/i[k].length/3);l+=_*i[k].reduce((O,L)=>O+L,0);return}l+=h*y(i[k])}}),this._actionInfoCacheByCards[t]=l,l}simulateMoney(e){if(e===0)return this.turbo?30:0;const s=this.getCardsByDay(e),t=this.getGroupSizes(e);let a=!1,l=!1,o=[[],[],[],[]];for(const d of s)switch(d.Name==="All You Can Eat"&&(a=!0),d.Name==="Double Helpings"&&(l=!0),d.DishType){case m.Dessert:d.DishValue&&o[2].push(d.DishValue);break;case m.Starter:d.DishValue&&o[0].push(d.DishValue);break;case m.Side:d.DishValue&&o[3].push(d.DishValue);break;case m.Main:case m.Base:d.Name==="Tacos"?(o[1].push(2),o[1].push(3)):d.DishValue&&o[1].push(d.DishValue)}let g=l?.5:a?.25:0,r=0;l&&(r+=3);const[u,i]=W({starters:o[0].length,main:!!o[1].length,doubleOrderChance:g,desserts:o[2].length,sides:o[3].length,groupSizes:t});let C=0;for(let d=0;d<i.length;d++){let n=i[d];for(;n--;)d<3&&(C+=r),C+=o[d][Math.floor(Math.random()*o[d].length)]}const f=T(this.playerCount),b=this.getBookingDeskCount(e),c=this.getBookingDeskMoney(e);return f*(C+b*c)}getBookingDeskMoney(e){return Math.ceil((e+1)/2)+2}getCardsByDay(e){if(this._cardsByDay[e]===void 0){let s;this.turbo?s=e-1:(s=Math.max(0,Math.floor((e-1)/3)),e>5&&s++),this._cardsByDay[e]=[...this.startingCards,...this.cards.slice(0,s)]}return this._cardsByDay[e]}getBookingDeskCount(e,s=1){const t=Math.ceil(this.getExpectedCustomers(e)/this.getExpectedGroupSize(e));if(this.getCardsByDay(e).some(u=>u.Name==="Herd Mentality"))return Math.min(t,3)+1;const a=[],l=this.getCardsByDay(e);let o=1;(this.turbo||l.some(u=>u.Name==="Morning Rush"))&&(a.push(.2),o++),(this.turbo||l.some(u=>u.Name==="Lunch Rush"))&&(a.push(.5),o++),(this.turbo||l.some(u=>u.Name==="Dinner Rush"))&&(a.push(.8),o++);const g=s/this.getDayLength(e),r=.1/t;for(let u=1;u<t;u++){const i=u/t,C=i-r-g,f=i+r+g;let b=!1;for(const c of a)if(C<=c&&f>=c){b=!0;break}b||o++}return o}getNonRushGroupCount(e){const s=this.getExpectedCustomers(e),t=this.getCardsByDay(e).filter(o=>o.Name==="Closing Time?").length*.2,a=this.getExpectedGroupSize(e),l=s*(1+t)/a;return Math.ceil(l)}getCustomerCount(e){return this.getGroupSizes(e).reduce((s,t)=>s+t,0)}getGroupSizes(e){const s=this.seed?F(1997821,e,this.seed).random:new G(Math.floor(Math.random()*4294967295)),t=this.getNonRushGroupCount(e),a=this.getCardsByDay(e).some(f=>f.Name==="Herd Mentality");let l=t,o=[],[g,r]=this.getGroupSizeRange(e);!this.seed||this.seed==="_min"?r=g:this.seed==="_max"&&(g=r);{let f=l-1;for(;f--;)s.value}for(;l--;)o.push(s.range(g,r+1)),!a&&l!==t-1&&s.value;let u=this.turbo?3:this.getCardsByDay(e).filter(f=>I[f.Name]).length;const i=Math.ceil(Math.max(1,this.getExpectedCustomers(e)*.15));let C=u*i;for(;C--;)o.push(s.range(g,r+1));if(!this.seed||this.seed[0]==="_"){let f=g;for(let b=0;b<o.length;b++)o[b]=f,f++,f>r&&(f=g)}return o}getExpectedGroupSize(e){const s=this.getGroupSizeRange(e);return(s[0]+s[1])/2}getGroupSizeRange(e){let s=1,t=2;for(const a of this.getCardsByDay(e))switch(a.Name){case"Individual Dining":t--;break;case"Medium Groups":s++,t+=2;break;case"Large Groups":s+=2,t+=2;break;case"Flexible Dining":s--,t++;break;case"Community":const l=Math.floor((e-1)/3);s+=l,t+=l;break}return[s,t]}getExpectedCustomers(e){const s=this.getReductions(e),t=this.getDayLength(e),a=this.getPlayerModifier(),l=this.getCourseModifier(e),o=this.getDayRate(e),g=this.getCustomersPerHour(e),r=this.getAdvertisingModifier(e);return .85**s*(t/25*o*a)/l*g*r}getAdvertisingModifier(e){return 1+.25*this.getCardsByDay(e).filter(t=>t.Name==="Advertising").length}getDayRate(e){let s=1;switch(e){case 1:s=1.25;break;case 2:s=1.5;break;default:s=1.5+.15*(e-3);break}return e>15&&(s+=(this.turbo?.1:0)*(e-15)**1.5),s}getCourseModifier(e){let s=1;const t=this.getCardsByDay(e);return t.some(a=>a.DishType===m.Dessert||a.Name==="Black Coffee"||a.Name==="Cakes")&&(s+=.25),t.some(a=>a.DishType===m.Starter)&&(s+=.25),s}getPlayerModifier(){let e;switch(this.playerCount){case 0:e=1;break;case 1:e=.8;break;case 2:e=1;break;case 3:e=1.25;break;default:e=1.5;break}return e}getDayLength(e){return 100+Math.floor(e/3)*25}getCustomersPerHour(e){let s=1;return this.turbo&&(s=1.5,s*=1+e/10),s}getReductions(e){return this.getCardsByDay(e).reduce((t,a)=>t+a.CustomerMultiplier,0)}getMapSize(){const s=new w(this.seed,5078598).useSubcontext(0).random.range(0,8);let t;switch(s){case 0:t="Small (2)";break;case 4:t="Medium (2)";break;case 1:case 5:t="Diner (1)";break;case 2:case 6:t="Large (3)";break;case 3:case 7:t="Huge (4)";break;default:throw new Error}return t}getLayoutInfo(){const s=new w(this.seed,5078598).useSubcontext(0).random.range(0,8);let t,a;switch(s){case 0:a=70,t=2;break;case 4:a=84,t=2;break;case 1:case 5:a=60,t=1;break;case 2:case 6:a=9*13,t=3;break;case 3:case 7:a=12*16,t=4;break;default:throw new Error}return[t,a]}getDoorInfo(){if(this.mapSize!=="Diner (1)")return-1;let e=new G(new w(this.seed,98234234).useSubcontext(0).random.value),s=23;for(;s--;)e.value;return e.range(0,4)}}function T(S){switch(S){case 1:return 1.25;case 2:return 1.1;default:return 1}}const Q=["Diner (1)","Small (2)","Medium (2)","Large (3)","Huge (4)"];export{J as R,Q as t};
