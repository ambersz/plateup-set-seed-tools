var v=Object.defineProperty;var A=(k,e,s)=>e in k?v(k,e,{enumerable:!0,configurable:!0,writable:!0,value:s}):k[e]=s;var y=(k,e,s)=>A(k,typeof e!="symbol"?e+"":e,s);import{D,n as S,j as L,i as G,F as w}from"./main-BTw1FnPV.js";const R={};function E(k){const{starters:e,main:s,doubleOrderChance:t,desserts:i,sides:l,groupSizes:r}=k,h=[e,s,t,i,[...r].sort((u,f)=>u-f)].join("|");if(R[h])return R[h];let o=[0,0,0],n=[0,0,0,0],m=1-.75**l;if(e>0){o[0]=1;let u=1-.75**e;t===.5&&(u*=1.25,m*=1.25),n[0]=r.reduce((f,a)=>f+1+(a-1)*u,0)}const p=r.reduce((u,f)=>u+f);s&&(o[1]=1,n[1]=p),i>0&&(n[2]=p,s?(o[2]=1-.75**i,t===.5&&(o[2]*=1.25)):o[2]=1);let c=1;e>0&&(o[0]*=1+t,c*=1-t,n[0]*=o[0]),s&&(o[1]*=1+c*t,c*=1-t,n[1]*=o[1],n[3]=n[1]*m),i>0&&(o[2]*=1+c*t,c*=1-t,n[2]*=o[2]);const C=[o.map(u=>u*r.length),n];return R[h]=C,C}function O(k){const{starters:e,main:s,doubleOrderChance:t,desserts:i,sides:l,groupSizes:r}=k;let h=[0,0,0],o=[0,0,0,0],n=1-.75**e,m=1-.75**i,p=1-.75**l;t===.5&&(n*=1.25,m*=1.25,p*=1.25);const c=a=>{h[0]++,o[0]++;for(let b=0;b<a-1;b++)Math.random()<n&&o[0]++},C=a=>{h[1]++,o[1]+=a;for(let b=0;b<a;b++)Math.random()<p&&o[3]++},u=a=>{h[2]++,o[2]+=a};for(const a of r){let b=!1;e>0&&(c(a),!b&&Math.random()<t&&(b=!0,c(a))),C(a),!b&&Math.random()<t&&(b=!0,C(a)),i>0&&Math.random()<m&&(u(a),!b&&Math.random()<t&&(b=!0,u(a)))}return[h,o]}const _={"Diner (1)":1,"Small (2)":2,"Medium (2)":2,"Large (3)":3,"Huge (4)":4},P={};["Morning Rush","Lunch Rush","Dinner Rush"].forEach(k=>P[k]=!0);class F{constructor(e,s=[],t=[]){y(this,"seed");y(this,"mapSize");y(this,"frontDoor");y(this,"startingCards");y(this,"cards");y(this,"playerCount");y(this,"turbo");y(this,"_actionInfoCacheByCards",{});y(this,"_cardsByDay",[]);this.seed=e,this.mapSize=this.getMapSize(),this.frontDoor=this.getDoorInfo(),this.startingCards=s,this.cards=t,this.playerCount=_[this.mapSize],this.turbo=this.startingCards.some(i=>{if(i===void 0){console.log({startingCards:s});debugger}return i.Name==="Turbo"})}guessMoney(e){if(e===0)return this.turbo?30:0;const s=this.getCardsByDay(e),t=this.getGroupSizes(e);let i=!1,l=!1,r=0,h=[],o=[],n=0,m=[],p=0,c=[];for(const g of s)switch(g.Name==="All You Can Eat"&&(i=!0),g.Name==="Double Helpings"&&(l=!0),g.DishType){case D.Dessert:n++,g.DishValue&&m.push(g.DishValue);break;case D.Starter:g.DishValue&&h.push(g.DishValue),r++;break;case D.Side:g.DishValue&&c.push(g.DishValue),p++;break;case D.Main:case D.Base:g.Name==="Tacos"?(o.push(2),o.push(3)):g.DishValue&&o.push(g.DishValue)}let C=l?.5:i?.25:0,u=[0,0,0,0];if(u[0]=S(h),u[1]=S(o),u[2]=S(m),u[3]=S(c),l)for(let g=0;g<3;g++)u[g]&&(u[g]+=3);const[f,a]=E({starters:r,main:!!u[1],doubleOrderChance:C,desserts:n,sides:p,groupSizes:t});let b=0;for(let g=0;g<a.length;g++)b+=a[g]*u[g];const N=x(this.playerCount),B=this.getBookingDeskCount(e),z=this.getBookingDeskMoney(e);return N*(b+B*z)}courseInfo(e){if(e===0)return[[0,0,0],[0,0,0,0]];const s=this.getCardsByDay(e),t=this.getGroupSizes(e);let i=!1,l=!1,r=0,h=[],o=[],n=0,m=[],p=0,c=[];for(const a of s)switch(a.Name==="All You Can Eat"&&(i=!0),a.Name==="Double Helpings"&&(l=!0),a.DishType){case D.Dessert:n++,a.DishValue&&m.push(a.DishValue);break;case D.Starter:a.DishValue&&h.push(a.DishValue),r++;break;case D.Side:a.DishValue&&c.push(a.DishValue),p++;break;case D.Main:case D.Base:a.Name==="Tacos"?(o.push(2),o.push(3)):a.DishValue&&o.push(a.DishValue)}let C=l?.5:i?.25:0,u=[0,0,0,0];if(u[0]=S(h),u[1]=S(o),u[2]=S(m),u[3]=S(c),l)for(let a=0;a<3;a++)u[a]&&(u[a]+=3);return E({starters:r,main:!!u[1],doubleOrderChance:C,desserts:n,sides:p,groupSizes:t})}actionInfo(e){if(e===0)return 0;const s=this.getCardsByDay(e),t=s.map(d=>d.Name).sort().join(","),i=this._actionInfoCacheByCards[t];if(i)return i;let l=[1,1,1],r=[[],[5],[]],h=0;const o=this.getGroupSizes(e);let n=!1,m=!1,p=0,c=[],C=[],u=0,f=[],a=0,b=[];for(const d of s){switch(d.Name==="All You Can Eat"&&(n=!0),d.Name==="Double Helpings"&&(m=!0),d.Name){case"Picky Eaters":r[1][0]++;break;case"Leisurely Eating":h+=2;break;case"Instant Service":for(let M=0;M<3;M++)l[M]--;break;case"Ice Cream":r[2].push(5);break;case"Cheese Board":r[2].push(10);break;case"Cherry Pie":r[2].push(11);break;case"Apple Pie":r[2].push(15);break;case"Pumpkin Pie":r[2].push(16);break}switch(d.DishType){case D.Dessert:u++,d.DishValue&&f.push(d.DishValue);break;case D.Starter:d.DishValue&&c.push(d.DishValue),p||(l[0]=4),r[0].push(15),p++;break;case D.Side:d.DishValue&&b.push(d.DishValue),a++;break;case D.Main:case D.Base:d.Name==="Tacos"?(C.push(2),C.push(3)):d.DishValue&&C.push(d.DishValue)}}let N=m?.5:n?.25:0,B=0;B+=o.length*h;const[z,g]=E({starters:p,main:!0,doubleOrderChance:N,desserts:u,sides:a,groupSizes:o});z.forEach((d,M)=>B+=d*l[M]);{let d=0;for(const M of r)for(let V=0;V<M.length;V++)M[V]+=d,d+=1,d*=2}return g.forEach((d,M)=>{var V;if((V=r[M])!=null&&V.length){if(!M){const T=Math.ceil(d/r[M].length/3);B+=T*r[M].reduce((I,H)=>I+H,0);return}B+=d*S(r[M])}}),this._actionInfoCacheByCards[t]=B,B}simulateMoney(e){if(e===0)return this.turbo?30:0;const s=this.getCardsByDay(e),t=this.getGroupSizes(e);let i=!1,l=!1,r=[[],[],[],[]];for(const f of s)switch(f.Name==="All You Can Eat"&&(i=!0),f.Name==="Double Helpings"&&(l=!0),f.DishType){case D.Dessert:f.DishValue&&r[2].push(f.DishValue);break;case D.Starter:f.DishValue&&r[0].push(f.DishValue);break;case D.Side:f.DishValue&&r[3].push(f.DishValue);break;case D.Main:case D.Base:f.Name==="Tacos"?(r[1].push(2),r[1].push(3)):f.DishValue&&r[1].push(f.DishValue)}let h=l?.5:i?.25:0,o=0;l&&(o+=3);const[n,m]=O({starters:r[0].length,main:!!r[1].length,doubleOrderChance:h,desserts:r[2].length,sides:r[3].length,groupSizes:t});let p=0;for(let f=0;f<m.length;f++){let a=m[f];for(;a--;)f<3&&(p+=o),p+=r[f][Math.floor(Math.random()*r[f].length)]}const c=x(this.playerCount),C=this.getBookingDeskCount(e),u=this.getBookingDeskMoney(e);return c*(p+C*u)}getBookingDeskMoney(e){return Math.ceil((e+1)/2)+2}getCardsByDay(e){if(this._cardsByDay[e]===void 0){let s;this.turbo?s=e-1:(s=Math.max(0,Math.floor((e-1)/3)),e>5&&s++),this._cardsByDay[e]=[...this.startingCards,...this.cards.slice(0,s)]}return this._cardsByDay[e]}getBookingDeskCount(e,s=1){const t=Math.ceil(this.getExpectedCustomers(e)/this.getExpectedGroupSize(e));if(this.getCardsByDay(e).some(n=>n.Name==="Herd Mentality"))return Math.min(t,3)+1;const i=[],l=this.getCardsByDay(e);let r=1;(this.turbo||l.some(n=>n.Name==="Morning Rush"))&&(i.push(.2),r++),(this.turbo||l.some(n=>n.Name==="Lunch Rush"))&&(i.push(.5),r++),(this.turbo||l.some(n=>n.Name==="Dinner Rush"))&&(i.push(.8),r++);const h=s/this.getDayLength(e),o=.1/t;for(let n=1;n<t;n++){const m=n/t,p=m-o-h,c=m+o+h;let C=!1;for(const u of i)if(p<=u&&c>=u){C=!0;break}C||r++}return r}getNonRushGroupCount(e){const s=this.getExpectedCustomers(e),t=this.getCardsByDay(e).filter(r=>r.Name==="Closing Time?").length*.2,i=this.getExpectedGroupSize(e),l=s*(1+t)/i;return Math.ceil(l)}getCustomerCount(e){return this.getGroupSizes(e).reduce((s,t)=>s+t,0)}getGroupSizes(e){const s=this.seed?L(1997821,e,this.seed).random:new G(Math.floor(Math.random()*4294967295)),t=this.getNonRushGroupCount(e),i=this.getCardsByDay(e).some(c=>c.Name==="Herd Mentality");let l=t,r=[],[h,o]=this.getGroupSizeRange(e);this.seed||(o=h);{let c=l-1;for(;c--;)s.value}for(;l--;)r.push(s.range(h,o+1)),!i&&l!==t-1&&s.value;let n=this.turbo?3:this.getCardsByDay(e).filter(c=>P[c.Name]).length;const m=Math.ceil(Math.max(1,this.getExpectedCustomers(e)*.15));let p=n*m;for(;p--;)r.push(s.range(h,o+1));if(!this.seed){let c=h;for(let C=0;C<r.length;C++)r[C]=c,c++,c>o&&(c=h);debugger}return r}getExpectedGroupSize(e){const s=this.getGroupSizeRange(e);return(s[0]+s[1])/2}getGroupSizeRange(e){let s=1,t=2;for(const i of this.getCardsByDay(e))switch(i.Name){case"Individual Dining":t--;break;case"Medium Groups":s++,t+=2;break;case"Large Groups":s+=2,t+=2;break;case"Flexible Dining":s--,t++;break;case"Community":const l=Math.floor((e-1)/3);s+=l,t+=l;break}return[s,t]}getExpectedCustomers(e){const s=this.getReductions(e),t=this.getDayLength(e),i=this.getPlayerModifier(),l=this.getCourseModifier(e),r=this.getDayRate(e),h=this.getCustomersPerHour(e),o=this.getAdvertisingModifier(e);return .85**s*(t/25*r*i)/l*h*o}getAdvertisingModifier(e){return 1+.25*this.getCardsByDay(e).filter(t=>t.Name==="Advertising").length}getDayRate(e){let s=1;switch(e){case 1:s=1.25;break;case 2:s=1.5;break;default:s=1.5+.15*(e-3);break}return e>15&&(s+=(this.turbo?.1:0)*(e-15)**1.5),s}getCourseModifier(e){let s=1;const t=this.getCardsByDay(e);return t.some(i=>i.DishType===D.Dessert||i.Name==="Black Coffee"||i.Name==="Cakes")&&(s+=.25),t.some(i=>i.DishType===D.Starter)&&(s+=.25),s}getPlayerModifier(){let e;switch(this.playerCount){case 0:e=1;break;case 1:e=.8;break;case 2:e=1;break;case 3:e=1.25;break;default:e=1.5;break}return e}getDayLength(e){return 100+Math.floor(e/3)*25}getCustomersPerHour(e){let s=1;return this.turbo&&(s=1.5,s*=1+e/10),s}getReductions(e){return this.getCardsByDay(e).reduce((t,i)=>t+i.CustomerMultiplier,0)}getMapSize(){const s=new w(this.seed,5078598).useSubcontext(0).random.range(0,8);let t;switch(s){case 0:t="Small (2)";break;case 4:t="Medium (2)";break;case 1:case 5:t="Diner (1)";break;case 2:case 6:t="Large (3)";break;case 3:case 7:t="Huge (4)";break;default:throw new Error}return t}getLayoutInfo(){const s=new w(this.seed,5078598).useSubcontext(0).random.range(0,8);let t,i;switch(s){case 0:i=70,t=2;break;case 4:i=84,t=2;break;case 1:case 5:i=60,t=1;break;case 2:case 6:i=9*13,t=3;break;case 3:case 7:i=12*16,t=4;break;default:throw new Error}return[t,i]}getDoorInfo(){if(this.mapSize!=="Diner (1)")return-1;let e=new G(new w(this.seed,98234234).useSubcontext(0).random.value),s=23;for(;s--;)e.value;return e.range(0,4)}}function x(k){switch(k){case 1:return 1.25;case 2:return 1.1;default:return 1}}const W=["Diner (1)","Small (2)","Medium (2)","Large (3)","Huge (4)"];export{F as R,W as t};
